<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="
package com.example.applock.activities

import android.os.Bundle
import android.view.MenuItem
import android.widget.Button
import android.widget.FrameLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.andrognito.patternlockview.PatternLockView
import com.andrognito.patternlockview.listener.PatternLockViewListener
import com.example.applock.R
import com.example.applock.utils.AdsManager
import com.example.applock.utils.LockUtils

class PatternSetupActivity : AppCompatActivity() {

    private lateinit var patternLockView: PatternLockView
    private lateinit var textPrompt: TextView
    private lateinit var btnCancel: Button
    private lateinit var adContainer: FrameLayout
    private lateinit var adsManager: AdsManager

    private var firstPattern: String? = null
    private var isConfirmationStep = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_pattern_setup)

        // Enable back button
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "Set Pattern Lock"

        // Initialize views
        patternLockView = findViewById(R.id.pattern_lock_view)
        textPrompt = findViewById(R.id.text_prompt)
        btnCancel = findViewById(R.id.btn_cancel)
        adContainer = findViewById(R.id.ad_container)

        // Initialize AdManager
        adsManager = (application as com.example.applock.App).adsManager

        // Load banner ad
        adsManager.loadBannerAd(adContainer)

        setupPatternLock()

        btnCancel.setOnClickListener {
            finish()
        }
    }

    private fun setupPatternLock() {
        textPrompt.text = "Draw your pattern"

        patternLockView.addPatternLockListener(object : PatternLockViewListener {
            override fun onStarted() {
                // No action needed
            }

            override fun onProgress(progressPattern: MutableList<PatternLockView.Dot>?) {
                // No action needed
            }

            override fun onComplete(pattern: MutableList<PatternLockView.Dot>?) {
                if (pattern != null && pattern.size >= 4) {
                    val patternString = patternToString(pattern)
                    handlePattern(patternString)
                } else {
                    // Pattern too short
                    Toast.makeText(
                        this@PatternSetupActivity,
                        "Pattern too short, connect at least 4 dots",
    Toast.LENGTH_SHORT
    ).show()
    patternLockView.clearPattern()
    }
    }

    override fun onCleared() {
    // No action needed
    }
    })
    }

    private fun patternToString(pattern: List<PatternLockView.Dot>): String {
val result = StringBuilder()
for (dot in pattern) {
result.append(dot.id)
}
return result.toString()
}

private fun handlePattern(patternString: String) {
if (!isConfirmationStep) {
// First time drawing pattern
firstPattern = patternString
isConfirmationStep = true
textPrompt.text = "Draw pattern again to confirm"
patternLockView.clearPattern()
} else {
// Confirmation step
if (patternString == firstPattern) {
// Patterns match, save it
LockUtils.savePattern(this, patternString)

// Show interstitial ad before finishing
adsManager.showInterstitialAd(this) {
Toast.makeText(this, "Pattern set successfully", Toast.LENGTH_SHORT).show()
finish()
}
} else {
// Patterns don't match
Toast.makeText(this, "Patterns don't match, try again", Toast.LENGTH_SHORT).show()
isConfirmationStep = false
textPrompt.text = "Draw your pattern"
patternLockView.clearPattern()
}
}
}

override fun onOptionsItemSelected(item: MenuItem): Boolean {
if (item.itemId == android.R.id.home) {
onBackPressed()
return true
}
return super.onOptionsItemSelected(item)
}
}