<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.9.2">

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.ROOT)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    &quot;%0&quot; + (digest.length * 2) + &quot;x&quot;, bigInteger).toLowerCase();"
        errorLine2="                                                                  ~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\utils\PatternLockUtils.java"
            line="96"
            column="67"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.ROOT)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    &quot;%0&quot; + (digest.length * 2) + &quot;x&quot;, bigInteger).toLowerCase();"
        errorLine2="                                                                  ~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\utils\PatternLockUtils.java"
            line="120"
            column="67"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application or sdk runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,https://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 34"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\build.gradle"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of `compileSdkVersion` than 34 is available: 35"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compileSdkVersion 34"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\build.gradle"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="ParcelClassLoader"
        severity="Warning"
        message="Passing null here (to use the default class loader) will not work if you are restoring your own classes. Consider using for example `getClass().getClassLoader()` instead."
        category="Correctness"
        priority="3"
        summary="Default Parcel Class Loader"
        explanation="The documentation for `Parcel#readParcelable(ClassLoader)` (and its variations) says that you can pass in `null` to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.&#xA;&#xA;If you are writing your own classes into the `Parcel` (not just SDK classes like `String` and so on), then you should supply a `ClassLoader` for your application instead; a simple way to obtain one is to just call `getClass().getClassLoader()` from your own class."
        url="https://developer.android.com/reference/android/os/Parcel.html"
        urls="https://developer.android.com/reference/android/os/Parcel.html"
        errorLine1="            mInputEnabled = (Boolean) in.readValue(null);"
        errorLine2="                                         ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="1297"
            column="42"/>
    </issue>

    <issue
        id="ParcelClassLoader"
        severity="Warning"
        message="Passing null here (to use the default class loader) will not work if you are restoring your own classes. Consider using for example `getClass().getClassLoader()` instead."
        category="Correctness"
        priority="3"
        summary="Default Parcel Class Loader"
        explanation="The documentation for `Parcel#readParcelable(ClassLoader)` (and its variations) says that you can pass in `null` to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.&#xA;&#xA;If you are writing your own classes into the `Parcel` (not just SDK classes like `String` and so on), then you should supply a `ClassLoader` for your application instead; a simple way to obtain one is to just call `getClass().getClassLoader()` from your own class."
        url="https://developer.android.com/reference/android/os/Parcel.html"
        urls="https://developer.android.com/reference/android/os/Parcel.html"
        errorLine1="            mInStealthMode = (Boolean) in.readValue(null);"
        errorLine2="                                          ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="1298"
            column="43"/>
    </issue>

    <issue
        id="ParcelClassLoader"
        severity="Warning"
        message="Passing null here (to use the default class loader) will not work if you are restoring your own classes. Consider using for example `getClass().getClassLoader()` instead."
        category="Correctness"
        priority="3"
        summary="Default Parcel Class Loader"
        explanation="The documentation for `Parcel#readParcelable(ClassLoader)` (and its variations) says that you can pass in `null` to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.&#xA;&#xA;If you are writing your own classes into the `Parcel` (not just SDK classes like `String` and so on), then you should supply a `ClassLoader` for your application instead; a simple way to obtain one is to just call `getClass().getClassLoader()` from your own class."
        url="https://developer.android.com/reference/android/os/Parcel.html"
        urls="https://developer.android.com/reference/android/os/Parcel.html"
        errorLine1="            mTactileFeedbackEnabled = (Boolean) in.readValue(null);"
        errorLine2="                                                   ~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="1299"
            column="52"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; `SDK_INT` is always >= 23"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="233"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; `SDK_INT` is never &lt; 23"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="1037"
            column="13"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `PatternLockView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="C:\Users\ASUS\AndroidStudioProjects\app_lock\FlutterAppLock\patternlockview\src\main\java\com\andrognito\patternlockview\PatternLockView.java"
            line="435"
            column="20"/>
    </issue>

</issues>
